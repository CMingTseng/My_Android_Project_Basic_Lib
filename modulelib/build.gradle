//import java.text.SimpleDateFormat

// FIXME http://blog.saymagic.cn/2015/02/16/release-library-to-jcenter.html
apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

group = "c.min.tseng"

//def getVersionCode = { ->
//    try {
//        def code = new ByteArrayOutputStream()
//        exec {
//            commandLine 'git', 'tag', '--list'
//            standardOutput = code
//        }
//        return code.toString().split("\n").size()
//    }
//    catch (ignored) {
//        return -1;
//    }
//}
//
//def getVersionName = { ->
//    try {
//        def stdout = new ByteArrayOutputStream()
//        exec {
//            commandLine 'git', 'describe', '--tags', '--long'
//            standardOutput = stdout
//        }
//        return stdout.toString().trim()
//    }
//    catch (ignored) {
//        return null;
//    }
//}
//
//def getGitTagId = { ->
//    def formatuic = getVersionName().split("-")
//    return formatuic[0];
//}
//
//def getGitCommitCount = { ->
//    def formatuic = getVersionName().split("-")
//    return formatuic[1];
//}
//
//def getGitCommitId = { ->
//    def formatuic = getVersionName().split("-")
//    return formatuic[2];
//}
//
//def getCusterVersionName = { ->
//    def formatuic = getVersionName().split("-")
//    def ori = "%s.%04d-CMT"
//    def outs = String.format(ori, formatuic[0], Integer.parseInt(formatuic[1]));
//    return outs;
//}
//
//def getAuthorEmail = { ->
//    try {
//        def stdout = new ByteArrayOutputStream()
//        exec {
//            commandLine 'git', 'config', '--global', '--get', 'user.email'
//            standardOutput = stdout
//        }
//        return stdout.toString().trim()
//    }
//    catch (ignored) {
//        return "";
//    }
//}
//
//
//def buildTime() {
//    def date = new Date()
//    def formattedDate = date.format('yyyyMMdd')
//    return formattedDate
//}

version = rootProject.ext.versionName

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"
    resourcePrefix "CMT"
    lintOptions {
//        // use this line to check all rules except those listed
//        disable 'RuleToDisable', 'SecondRuleToDisable'
//        // use this line to check just listed rules
//        enable 'FirstRuleToCheck', 'LastRuleToCheck'
        checkReleaseBuilds false
        abortOnError false
    }
    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 23
        versionCode rootProject.ext.versionCode
//        versionName rootProject.ext.versionName
        versionName version
        buildConfigField "String", "AUTHOR_EMAIL", "\"" + rootProject.ext.authorEmail + "\""
        resValue 'string', 'Basic_module_libraryVersion', rootProject.ext.versionName
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    signingConfigs {
        release {
            keyAlias 'Alias' //'FIXME  YourKeyAlias'
            keyPassword 'pw' //'FIXME  YourKeyPassword
            storeFile file('FilePath') //'FIXME  YourStoreFile
            storePassword 'spw'//'FIXME  YourStorePassword
        }
        debug {
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storeFile file('D:/keystore/debug.keystore')
            storePassword 'android'
        }
    }

//    productFlavors {
//        modulelib {
//            versionCode getVersionCode()
////            versionName getVersionName()
//            versionName version
//        }
//    }

    buildTypes {
        release {
            shrinkResources true
            buildConfigField "boolean", "ISDEBUG", "false"
            signingConfig signingConfigs.release
            minifyEnabled false //proguard  Yes / No
            // http://stackoverflow.com/questions/12390466/android-proguard-not-removing-all-log-messages
            //http://researcharea.blogspot.tw/2012/04/assumenosideeffects-not-working-in.html
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            signingConfig signingConfigs.debug
            shrinkResources true
//            applicationIdSuffix ".debug"
            buildConfigField "boolean", "ISDEBUG", "true"
        }

//        applicationVariants.all { variant ->
//            variant.outputs.each { output ->
//                def outputFile = output.outputFile
//                if (outputFile != null && outputFile.name.endsWith('.apk')) {
////                    def fileName = outputFile.name.replace('.apk', "-" + getVersionName() + ".apk")
////                    def fileName = "${variant.productFlavors[0].name}_${variant.productFlavors[0].versionName}_${buildTime()}.apk"
////                    def fileName = "${variant.productFlavors[0].name}_${variant.productFlavors[0].versionName}.apk"
////                    def fileName = "${variant.flavorName}_${variant.versionName}_${buildTime()}.apk"
////                    output.outputFile = new File(outputFile.parent, fileName)
////                    def apkFile = new File(output.outputFile.getParent(), "${variant.flavorName}_v${variant.versionName}.apk")
//                    def apkFile = new File(outputFile.parent, "${variant.flavorName}_v${variant.versionName}_${buildTime()}.apk")
//                    output.outputFile = apkFile
//                }
//            }
//        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/notice.txt'
    }
}

//apply from: 'https://raw.githubusercontent.com/tuvvut/android-fat-aar/master/fat-aar.gradle'
//apply from: 'fat-aar.gradle'

configurations {
//    all*.exclude group: 'com.android.support', module: 'support-annotations'
//    all*.exclude group: 'com.android.support', module: 'support-v4'
//    all*.exclude group: 'com.android.support', module: 'support-v7'
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile "com.android.support:support-annotations:${rootProject.ext.supportLibVersion}"
    compile "com.android.support:support-annotations:${rootProject.ext.supportLibVersion}"
    compile "com.android.support:appcompat-v7:${rootProject.ext.supportLibVersion}"
    compile "com.android.support:recyclerview-v7:${rootProject.ext.supportLibVersion}"
    compile "com.android.support:support-v4:${rootProject.ext.supportLibVersion}"
    compile "com.android.support:design:${rootProject.ext.supportLibVersion}"
    compile "com.android.support:support-v13:${rootProject.ext.supportLibVersion}"
    //    compile project(':modulelib')
//    compile 'c.min.tseng:modulelib:0.0.1'
    //FIXME http://stackoverflow.com/questions/28605367/library-with-bundles-dependencies-fat-aar
//        embedded project(':modulelib')
//    embedded 'c.min.tseng:modulelib:0.0.1'
}

def pomArtifactId = 'modulelib'

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
}

task androidJavadocsJar(type: Jar) {
    classifier = 'javadoc'
    baseName = pomArtifactId
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    baseName = pomArtifactId
    from android.sourceSets.main.java.srcDirs
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
    archives androidSourcesJar
    archives androidJavadocsJar
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
bintray {
    key = properties.getProperty("bintray.apikey")
    user = properties.getProperty("bintray.user")
    configurations = ['archives']
    pkg {
        repo = "maven"
        name = "MyProjectBasicLib"
        // #CONFIG# project name in jcenter
        websiteUrl = rootProject.ext.scmUrl
        vcsUrl = rootProject.ext.scmConnectionUrl
        licenses = ["Apache-2.0"]
        publish = true
    }
}

install {
    repositories.mavenInstaller {
        // This generates POM. xml  with proper parameters
        pom {
            version = rootProject.ext.versionName
            groupId = rootProject.ext.pomGroupId
            artifactId = pomArtifactId
            project {
                packaging 'aar'
                name 'My Android Project App Basic Lib Power by CMT'
                url rootProject.ext.scmUrl
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id 'neo'
                        name 'CMT'
                        email 'c.min.tseng@gmail.com'
                    }
                }
                scm {
                    connection rootProject.ext.scmConnectionUrl
                    developerConnection rootProject.ext.scmConnectionUrl
                    url rootProject.ext.scmUrl
                }
            }
        }
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "file:///${rootProject.rootDir}/maven-repository")
            pom.project {
                version = rootProject.ext.versionName
                groupId = rootProject.ext.pomGroupId
                artifactId = pomArtifactId
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
//                      url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
                scm {
                    url rootProject.ext.scmUrl
                    connection rootProject.ext.scmConnectionUrl
                    developerConnection rootProject.ext.scmDeveloperConnectionUrl
                }
            }
        }
    }
}

//install {
//    repositories {
//        mavenInstaller {
//            pom.version = rootProject.ext.versionName
//            pom.groupId = rootProject.ext.pomGroupId
//            pom.artifactId = pomArtifactId
//        }
//    }
//}